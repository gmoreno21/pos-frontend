-- Schema POS Supabase

-- Tables
create table if not exists public.productos (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  description text not null,
  sku varchar(64) unique null,
  price numeric(12,2) not null check (price > 0),
  status boolean not null default true,
  user_id uuid not null default auth.uid()
);

create index if not exists productos_user_idx on public.productos(user_id);
create index if not exists productos_status_idx on public.productos(status);
create index if not exists productos_description_idx on public.productos(description);
create index if not exists productos_sku_idx on public.productos(sku);

create table if not exists public.ventas (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  user_id uuid not null default auth.uid(),
  subtotal numeric(12,2) not null,
  tax numeric(12,2) not null,
  discount numeric(12,2) not null default 0,
  total numeric(12,2) not null,
  payment_method varchar(20) not null,
  items_count int not null
);

create index if not exists ventas_created_idx on public.ventas(created_at);
create index if not exists ventas_payment_idx on public.ventas(payment_method);
create index if not exists ventas_user_idx on public.ventas(user_id);

create table if not exists public.venta_items (
  id bigint generated by default as identity primary key,
  venta_id bigint not null references public.ventas(id) on delete cascade,
  product_id bigint not null references public.productos(id) on delete restrict,
  qty numeric(12,3) not null check (qty > 0),
  unit_price numeric(12,2) not null,
  discount numeric(12,2) not null default 0,
  line_total numeric(12,2) not null
);

create index if not exists venta_items_venta_idx on public.venta_items(venta_id);
create index if not exists venta_items_product_idx on public.venta_items(product_id);

-- Triggers
create or replace function public.tg_set_updated_at() returns trigger as $$
begin
  new.updated_at = now();
  return new;
end; $$ language plpgsql;

do $$ begin
  if not exists (select 1 from pg_trigger where tgname = 'productos_set_updated_at') then
    create trigger productos_set_updated_at before update on public.productos
    for each row execute function public.tg_set_updated_at();
  end if;
  if not exists (select 1 from pg_trigger where tgname = 'ventas_set_updated_at') then
    create trigger ventas_set_updated_at before update on public.ventas
    for each row execute function public.tg_set_updated_at();
  end if;
end $$;

create or replace function public.tg_set_line_total() returns trigger as $$
begin
  if new.line_total is null then
    new.line_total := (new.qty * new.unit_price) - coalesce(new.discount,0);
  end if;
  return new;
end; $$ language plpgsql;

do $$ begin
  if not exists (select 1 from pg_trigger where tgname = 'venta_items_calc_line_total') then
    create trigger venta_items_calc_line_total before insert or update on public.venta_items
    for each row execute function public.tg_set_line_total();
  end if;
end $$;

-- RLS
alter table public.productos enable row level security;
alter table public.ventas enable row level security;
alter table public.venta_items enable row level security;

-- Policies (user owns by user_id)
create policy if not exists productos_select on public.productos
for select using (auth.uid() = user_id);
create policy if not exists productos_insert on public.productos
for insert with check (auth.uid() = user_id);
create policy if not exists productos_update on public.productos
for update using (auth.uid() = user_id) with check (auth.uid() = user_id);
create policy if not exists productos_delete on public.productos
for delete using (auth.uid() = user_id);

create policy if not exists ventas_select on public.ventas
for select using (auth.uid() = user_id);
create policy if not exists ventas_insert on public.ventas
for insert with check (auth.uid() = user_id);
create policy if not exists ventas_update on public.ventas
for update using (auth.uid() = user_id) with check (auth.uid() = user_id);
create policy if not exists ventas_delete on public.ventas
for delete using (auth.uid() = user_id);

-- venta_items pertenece al due√±o de la venta y del producto
create policy if not exists venta_items_select on public.venta_items
for select using (
  exists(select 1 from public.ventas v where v.id = venta_id and v.user_id = auth.uid())
);

create policy if not exists venta_items_insert on public.venta_items
for insert with check (
  exists(select 1 from public.ventas v where v.id = venta_id and v.user_id = auth.uid())
  and exists(select 1 from public.productos p where p.id = product_id and p.user_id = auth.uid())
);

create policy if not exists venta_items_update on public.venta_items
for update using (
  exists(select 1 from public.ventas v where v.id = venta_id and v.user_id = auth.uid())
) with check (
  exists(select 1 from public.ventas v where v.id = venta_id and v.user_id = auth.uid())
);

create policy if not exists venta_items_delete on public.venta_items
for delete using (
  exists(select 1 from public.ventas v where v.id = venta_id and v.user_id = auth.uid())
);
